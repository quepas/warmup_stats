#!/usr/bin/env pypy
#
# Copyright (c) 2017 King's College London
# created by the Software Development Team <http://soft-dev.org/>
#
# The Universal Permissive License (UPL), Version 1.0
#
# Subject to the condition set forth below, permission is hereby granted to any
# person obtaining a copy of this software, associated documentation and/or
# data (collectively the "Software"), free of charge and under any and all
# copyright rights in the Software, and any and all patent rights owned or
# freely licensable by each licensor hereunder covering either (i) the
# unmodified Software as contributed to or provided by such licensor, or (ii)
# the Larger Works (as defined below), to deal in both
#
# (a) the Software, and
# (b) any piece of software and/or hardware listed in the lrgrwrks.txt file if
# one is included with the Software (each a "Larger Work" to which the Software
# is contributed by such licensors),
#
# without restriction, including without limitation the rights to copy, create
# derivative works of, display, perform, and distribute the Software and make,
# use, sell, offer for sale, import, export, have made, and have sold the
# Software and the Larger Work(s), and to sublicense the foregoing rights on
# either these or other terms.
#
# This license is subject to the following condition: The above copyright
# notice and either this complete permission notice or at a minimum a reference
# to the UPL must be included in all copies or substantial portions of the
# Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

"""
Annotate outliers into a Krun JSON file.

An outlier is defined as a pont outside of a 3 * (90 percentile - 10
percentile) rolling median.

usage: Write lists of outliers into Krun results file(s).
Example usage:

$ python mark_outliers_in_json.py results1.json.bz2
$ python mark_outliers_in_json.py ---window 250 results1.json.bz2 results2.json.bz2
        [-h] [--window WINDOW_SIZE] [--threshold THRESHOLD] json_files


positional arguments:
  json_files            One or more Krun result files.

optional arguments:
  -h, --help            show this help message and exit
  --window WINDOW_SIZE, -w WINDOW_SIZE
                        Size of the sliding window used to draw percentiles.
"""

import argparse
import os
import os.path
import sys

sys.path.insert(0, os.path.join(os.path.dirname(os.path.dirname(os.path.abspath(__file__)))))
from warmup.krun_results import read_krun_results_file, write_krun_results_file
from warmup.outliers import get_all_outliers, get_outliers


def main(in_files, window_size, threshold):
    krun_data = dict()
    for filename in in_files:
        assert os.path.exists(filename), 'File %s does not exist.' % filename
        print('Loading: %s' % filename)
        krun_data[filename] = read_krun_results_file(filename)
        krun_data[filename]['window_size'] = window_size
    for filename in krun_data:
        all_outliers = dict()
        unique_outliers = dict()
        common_outliers = dict()
        for bench in krun_data[filename]['wallclock_times']:
            all_outliers[bench] = list()
            for p_exec in krun_data[filename]['wallclock_times'][bench]:
                all_outliers[bench].append(get_all_outliers(p_exec, window_size))
            common, unique = get_outliers(all_outliers[bench],
                                          window_size,
                                          threshold)
            common_outliers[bench] = common
            unique_outliers[bench] = unique
        krun_data[filename]['all_outliers'] = all_outliers
        krun_data[filename]['common_outliers'] = common_outliers
        krun_data[filename]['unique_outliers'] = unique_outliers
        new_filename = create_output_filename(filename, window_size)
        print('Writing out: %s' % new_filename)
        write_krun_results_file(krun_data[filename], new_filename)


def create_output_filename(in_file_name, window_size):
    directory = os.path.dirname(in_file_name)
    basename = os.path.basename(in_file_name)
    if basename.endswith('.json.bz2'):
        root_name = basename[:-9]
    else:
        root_name = os.path.splitext(basename)[0]
    base_out = (root_name + '_outliers_w%g.json.bz2') % window_size
    return os.path.join(directory, base_out)


def create_cli_parser():
    """Create a parser to deal with command line switches."""

    script = os.path.basename(__file__)
    description = ('Write lists of outliers into Krun results file(s). '
                   'This script does not\nalter your original Krun results '
                   'file. Instead it writes out a new file whose\nname '
                   'indicates the size of the sliding window used to '
                   'detect outliers. For\nexample, if the input file is'
                   'results.json.bz2 and the window size is 200,\nthe '
                   'output of this script will be stored in file:\n'
                   'results_outliers_w200.json.bz2.'
                   '\n\nExample usage:\n\n\t$ python %s results1.json.bz2\n'
                   '\t$ python %s  --window 250 results1.json.bz2 '
                   'results2.json.bz2\n' % (script, script))
    parser = argparse.ArgumentParser(description)
    parser.add_argument('json_files', nargs='+', action='append', default=[],
                        type=str, help='One or more Krun result files.')
    parser.add_argument('--window', '-w', action='store', dest='window_size',
                        default=200, type=int,
                        help='Size of the sliding window used to draw percentiles.')
    parser.add_argument('--threshold', '-t', action='store', dest='threshold',
                        metavar='THRESHOLD', default=1, type=int,
                        help='If an outlier appears in more than THRESHOLD '
                             'executions it is said to be common to '
                             'several executions and is stored in the '
                             'common_outliers field of the JSON file, '
                             'rather than the unique_outliers field.')
    return parser


if __name__ == '__main__':
    parser = create_cli_parser()
    options = parser.parse_args()
    print('Marking outliers with sliding window size: %d' % options.window_size)
    main(options.json_files[0], options.window_size, options.threshold)
